name: "Start eHub and Run Tests"

on:
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Start the application in the background and capture logs
      - name: Start eController.IntegrationHub.exe in the background
        shell: pwsh
        run: |
          echo "Starting eController.IntegrationHub.exe in the background..."
          cd ehub
          Start-Process -FilePath ".\eController.IntegrationHub.exe" `
            -RedirectStandardOutput "${{ github.workspace }}\ehub\stdout.log" `
            -RedirectStandardError "${{ github.workspace }}\ehub\stderr.log" `
            -NoNewWindow -PassThru
          echo "Application started in the background. Logs redirected to stdout.log and stderr.log."

      # Step 3: Wait for log files to appear
      - name: Wait for stdout.log and stderr.log to appear
        shell: pwsh
        run: |
          echo "Waiting for stdout.log and stderr.log to be generated..."
          $logPath1 = "${{ github.workspace }}\ehub\stdout.log"
          $logPath2 = "${{ github.workspace }}\ehub\stderr.log"
          $maxRetries = 30
          $retryCount = 0
          while ($retryCount -lt $maxRetries) {
              if ((Test-Path $logPath1) -and (Test-Path $logPath2)) {
                  echo "Log files found."
                  break
              }
              echo "Log files not found yet, retrying in 2 seconds..."
              Start-Sleep -Seconds 2
              $retryCount++
          }
          if ($retryCount -eq $maxRetries) {
              throw "Log files were not generated after $($maxRetries * 2) seconds."
          }

      # Step 4: Display stdout.log
      - name: Display stdout logs
        shell: pwsh
        run: |
          echo "Displaying application standard output logs (stdout.log):"
          Get-Content "${{ github.workspace }}\ehub\stdout.log" -Tail 50

      # Step 5: Display stderr.log
      - name: Display stderr logs
        shell: pwsh
        run: |
          echo "Displaying application error logs (stderr.log):"
          Get-Content "${{ github.workspace }}\ehub\stderr.log" -Tail 50
          
      # Step 6: Display application-generated logs
      - name: Debug application-generated logs path
        shell: pwsh
        run: |
          echo "Checking for application-generated logs..."
          $logDir = "${{ github.workspace }}\ehub\Logs"
          echo "Listing all files in: $logDir"
          Get-ChildItem -Path $logDir
          $logFile = "$logDir\eController.IntegrationHub..log"
          if (Test-Path $logFile) {
              echo "Found log file at $logFile"
              Get-Content $logFile -Tail 50
          } else {
              throw "Log file not found at $logFile"
          }

      # Step 7: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 8: Install Cypress dependencies
      - name: Install Cypress dependencies
        run: npm install

      # Step 9: Run Cypress Tests
      - name: Run Cypress Tests
        run: npx cypress run
